import json
import os
from pathlib import Path
import subprocess

from atom.api import Atom, Bool, Dict, Enum, List, Str
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox
from enaml.stdlib.message_box import critical
from enaml.widgets.api import (
    Action, ActionGroup, ButtonGroup, CheckBox, Container, Field, FileDialogEx, GroupBox,
    Label, MainWindow, Menu, MenuBar, ObjectCombo, PopupView, PushButton,
    VGroup,
)

from psi import get_config, get_config_folder
from psi.application import list_preferences
from psi.experiment.api import paradigm_manager

from cfts.util import list_starship_calibrations, list_starship_connections
from cfts.paradigms import cfts


DATA_ROOT = get_config('DATA_ROOT')
PROC_ROOT = get_config('PROCESSED_ROOT')


class Experiment(Atom):

    label = Str()
    paradigm = Str()
    preference = Str()
    plugins = List(Str())


class Settings(Atom):

    logging_level = Enum('trace', 'debug', 'info', 'warning', 'error')('info')
    animal = Str()
    ear = Enum('left', 'right')
    experimenter = Enum('Sean', 'Brad')
    note = Str()

    monitor_sequence = List(Experiment)
    experiment_sequence = List(Experiment)

    starship_config = Dict()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def run_experiment(self, experiment, save=True):
        starship_to_use = set()
        env = {}
        for k, v in self.starship_config.items():
            env[f'CFTS_STARSHIP_{k.upper()}'] = v['calibration']
            env[f'CFTS_STARSHIP_{k.upper()}_GAIN'] = str(v['gain'])
            if v['ear'] in (self.ear, 'either'):
                starship_to_use.add(k)
        if len(starship_to_use) != 1:
            raise ValueError('Starships incorrectly configured')
        env['CFTS_SYSTEM_STARSHIP'] = next(iter(starship_to_use))

        filename = f'{{date_time}} {self.experimenter} {self.animal} {self.ear} {self.note} {experiment.paradigm}'
        filename = ' '.join(filename.split())
        args = ['psi', experiment.paradigm]
        if save:
            args.append(str(DATA_ROOT / filename))
        args.extend([
            '--preferences', experiment.preference,
            '--debug-level-console', self.logging_level.upper(),
        ])
        for plugin in experiment.plugins:
            args.extend(['--plugin', plugin])
        print(' '.join(args))
        subprocess.check_output(args, env=dict(os.environ, **env))

    def save_config(self, filename):
        info = {
            'experimenter': self.experimenter,
            'ear': self.ear,
            'logging_level': self.logging_level,
            'starship_config': self.starship_config,
        }
        info['experiment_sequence'] = [e.__getstate__() for e in self.experiment_sequence]
        info['monitor_sequence'] = [e.__getstate__() for e in self.monitor_sequence]
        filename = Path(filename)
        filename.write_text(json.dumps(info, indent=2))

    def load_config(self, filename):
        filename = Path(filename)
        info = json.loads(filename.read_text())
        info['experiment_sequence'] = [Experiment(**s) for s in info['experiment_sequence']]
        info['monitor_sequence'] = [Experiment(**s) for s in info['monitor_sequence']]
        for k, v in info.items():
            setattr(self, k, v)

        # Update the starship config list to reflect current starship connections
        starships = list_starship_connections()
        for starship in starships:
            if starship not in self.starship_config:
                self.starship_config[starship] = {
                    'ear': 'not used',
                    'calibration': None,
                    'gain': 40,
                }
        for starship in list(self.starship_config.keys()):
            if starship not in starships:
                self.starship_config.pop(starship)
            else:
                s = self.starship_config[starship]
                s.setdefault('gain', 40)
                s.setdefault('calibration', None)
                s.setdefault('ear', 'not used')


enamldef PluginPopup(PopupView): popup:
    attr experiment
    arrow_size = 20
    VGroup:
        Looper:
            iterable << paradigm_manager.get_paradigm(experiment.paradigm).plugins
            CheckBox:
                checked << loop_item.name in experiment.plugins
                checked ::
                    if checked:
                        if loop_item.name not in experiment.plugins:
                            experiment.plugins.append(loop_item.name)
                        else:
                            experiment.plugins.pop(loop_item.name)
                text << loop_item.title
                visible << not loop_item.required


enamldef ExperimentSequence(GroupBox): experiment_box:

    title = 'Experiments (monaural)'
    attr start_enabled = True
    attr save = True
    attr sequence

    layout_constraints => ():
        start_buttons = children[:-1:3]
        preferences = children[1:-1:3]
        plugin_buttons = children[2:-1:3]
        constraints = [
            hbox(vbox(*start_buttons), vbox(*preferences), vbox(*plugin_buttons)),
        ]
        for sb, p, pb in zip(start_buttons, preferences, plugin_buttons):
            constraints.append(align('v_center', sb, p, pb))
        return constraints

    Looper:
        iterable << experiment_box.sequence

        PushButton:
            text = loop_item.label
            enabled << experiment_box.start_enabled
            clicked ::
                try:
                    settings.run_experiment(loop_item, save=experiment_box.save)
                except Exception as e:
                    critical(experiment_box, 'Error starting experiment', str(e))

        ObjectCombo:
            items = [str(p) for p in list_preferences(loop_item.paradigm)]
            selected := loop_item.preference
            to_string = lambda x: Path(x).stem

        PushButton:
            constraints = [width == 30]
            text = 'âš™'
            visible << len([p for p in paradigm_manager.get_paradigm(loop_item.paradigm).plugins if not p.required]) > 0
            clicked ::
                paradigm = paradigm_manager.get_paradigm(loop_item.paradigm)
                available_plugins = paradigm.plugins[:]
                popup = PluginPopup(parent=self, experiment=loop_item)
                popup.show()


enamldef ExperimentInfo(GroupBox):
    title = 'Experiment Info'

    constraints = [
        vbox(
            hbox(experimenter_label, experimenter_field),
            hbox(animal_label, animal_field, hbox(l_button, r_button, spacing=0)),
            hbox(note_label, note_field),
            hbox(spacer(0), pb_raw, pb_proc),
        ),
        align('right', experimenter_label, animal_label, note_label),
        align('left', experimenter_label, animal_label, note_label),
        align('v_center', experimenter_label, experimenter_field),
        align('v_center', animal_label, animal_field, l_button, r_button),
        align('v_center', note_label, note_field),
        align('v_center', pb_raw, pb_proc),
        l_button.width == 30,
        r_button.width == 30,
        pb_raw.width == 90,
        pb_proc.width == 90,
    ]

    ButtonGroup: ear_group:
        pass

    Label: animal_label:
        text = 'Animal'

    Field: animal_field:
        text := settings.animal

    PushButton: l_button:
        text = 'L'
        checkable = True
        group = ear_group
        checked << settings.ear == 'left'
        checked ::
            settings.ear = 'left'

    PushButton: r_button:
        text = 'R'
        checkable = True
        group = ear_group
        checked << settings.ear == 'right'
        checked ::
            settings.ear = 'right'

    Label: experimenter_label:
        text = 'Experimenter'

    ObjectCombo: experimenter_field:
        items = ['Sean', 'Brad']
        selected := settings.experimenter

    Label: note_label:
        text = 'Note'

    Field: note_field:
        text := settings.note

    PushButton: pb_raw:
        text = 'ðŸ“‚ (Raw)'
        clicked ::
            os.startfile(DATA_ROOT)

    PushButton: pb_proc:
        text = 'ðŸ“‚ (Processed)'
        clicked ::
            os.startfile(PROC_ROOT)


enamldef Main(MainWindow):

    title = 'Cochlear Function Test Suite'

    attr settings = Settings()

    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'Load config\tCtrl+O'
                triggered ::
                    path = get_config_folder() / 'cfts'
                    path.mkdir(exist_ok=True)
                    filename = FileDialogEx.get_open_file_name(
                        current_path=str(path),
                        name_filters=['Experiment Settings (*.json)'],
                    )
                    settings.load_config(filename)
            Action:
                text = 'Save config\tCtrl+O'
                triggered ::
                    path = get_config_folder() / 'cfts'
                    path.mkdir(exist_ok=True)
                    filename = FileDialogEx.get_save_file_name(
                        current_path=str(path),
                        name_filters=['Experiment Settings (*.json)'],
                    )
                    settings.save_config(filename)
        Menu:
            title = '&Debug'
            ActionGroup:
                Looper:
                    iterable = settings.get_member('logging_level').items
                    Action:
                        checkable = True
                        text = loop_item
                        checked ::
                            settings.logging_level = loop_item
                        checked << settings.logging_level == loop_item

    Container:

        constraints = [
            vbox(
                equipment_info,
                monitor_box,
                experiment_info,
                experiment_box,
            ),
            # Align the widths of the first three elements in the
            # experiment/monitor box. The first three elements represent the
            # first "row" of widgets in each box. Once we align those, the rest
            # fall into line.
            align('width', monitor_box.children[0], experiment_box.children[0]),
            align('width', monitor_box.children[1], experiment_box.children[1]),
            align('width', monitor_box.children[2], experiment_box.children[2]),
        ]

        GroupBox: equipment_info:
            title = 'Equipment Configuration'

            layout_constraints => ():
                header = children[:3]
                widgets = children[3:-1]
                zipped = list(zip(
                    widgets[0::4],   # labels
                    widgets[1::4],   # ear select
                    widgets[2::4],   # starship select
                    widgets[3::4],   # gain select
                ))
                constraints = [
                    vbox(
                        hbox(*header),
                        *[hbox(*r) for r in zipped])
                ]
                constraints.extend([align('v_center', *r) for r in zipped])
                constraints.extend([
                    align('left', header[0], *widgets[1::4]),
                    align('left', header[1], *widgets[2::4]),
                    align('left', header[2], *widgets[3::4]),
                ])
                return constraints

            Label:
                text = 'Ear'
            Label:
                text = 'Calibration'
            Label:
                text = 'Gain'

            Looper:
                iterable << settings.starship_config.keys()
                Label:
                    text = f'Starship {loop_item}'
                ObjectCombo:
                    items = ['either', 'left', 'right', 'not used']
                    selected << settings.starship_config[loop_item]['ear']
                    selected ::
                        settings.starship_config[loop_item]['ear'] = selected
                ObjectCombo:
                    items << list(list_starship_calibrations().keys())
                    selected << settings.starship_config[loop_item]['calibration']
                    selected ::
                        settings.starship_config[loop_item]['calibration'] = selected
                ObjectCombo:
                    items = [20, 40]
                    selected << settings.starship_config[loop_item]['gain']
                    selected ::
                        settings.starship_config[loop_item]['gain'] = selected

        ExperimentInfo: experiment_info:
            pass

        ExperimentSequence: monitor_box:
            share_layout = True
            title = 'Experiment checks (not saved)'
            sequence << settings.monitor_sequence
            save = False

        ExperimentSequence: experiment_box:
            share_layout = True
            start_enabled << bool(settings.animal)
            sequence << settings.experiment_sequence
