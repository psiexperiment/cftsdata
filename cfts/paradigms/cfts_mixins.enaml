import logging
log = logging.getLogger(__name__)

import functools
import itertools
import os

from enaml.core.api import Conditional
from enaml.widgets.api import Label
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import numpy as np

from psiaudio.util import octave_space

from psi.context.api import (BoolParameter, ContextGroup, ContextRow,
                             EnumParameter, FriendlyCartesianProduct,
                             Parameter)
from psi.controller.api import (Callback, ContinuousInput, DecimateTo, Downsample,
                                ExperimentAction, get_hw_ai_choices, get_hw_ao_choices,
                                IIRFilter, MUXOutput)
from psi.controller.calibration.api import ChirpCalibrate, ToneCalibrate
from psi.core.enaml.api import ExperimentManifest
from psi.data.sinks.api import BinaryStore
from psi.experiment.api import StatusItem

from psi.paradigms.core.io_mixins import ChannelInput, ChannelInputManifest, \
    QueuedEpochChannelOutput


from cfts.util import list_starship_connections


################################################################################
# Utility function
################################################################################
def check_range(outputs, settings):
    max_sf = {}
    bad_settings = []
    good_settings = settings[:]

    # Identify which settings are good/bad
    for setting in settings:
        channel_sf = {}
        for o, o_info in outputs.items():
            l = setting[o_info['level']]
            f = setting[o_info['frequency']]

            # Calculate scaling factor for a tone and add some headroom of 1.01.
            sf = o.calibration.get_sf(f, l) * np.sqrt(2) * 1.01

            # If multiple tones are going out of a channel, then we need to
            # assume they sum.
            channel_sf[o.channel] = channel_sf.get(o.channel, 0) + sf

        # Now, figure out the max SF for the good settings for each channel
        for c, sf in channel_sf.items():
            if sf > c.max_range[1]:
                bad_settings.append(setting)
                good_settings.remove(setting)
                break
        else:
            max_sf[c] = max(max_sf.get(c, -np.inf), sf)

    # Now, update the channel with the expected range.
    for channel, sf in max_sf.items():
        channel.expected_range = (-sf, sf)

    return good_settings, bad_settings


################################################################################
# Simple frequency and level selectors
################################################################################
CONTEXT_ITEM_DETAIL = {
    # ABR and SAM/RAM EFR
    'target_tone_frequency': {
        'user_friendly_name': 'frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: (x * 1e3).round(0),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },
    'target_tone_level': {
        'user_friendly_name': 'levels',
        'step_unit': 'dB',
        'unit': 'dB SPL',
        'order_user_managed': True,
    },

    # SAM/RAM EFR
    'fm': {
        'user_friendly_name': 'modulation frequencies',
        'step_unit': 'Hz',
        'unit': 'Hz',
        'order_user_managed': True,
    },
    'fc': {
        'user_friendly_name': 'frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: (x * 1e3).round(0),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },

    # DPOAE
    'f2_frequency': {
        'user_friendly_name': 'F2 frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: (x * 1e3).round(0),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },
    'f2_level': {
        'user_friendly_name': 'levels',
        'step_unit': 'dB',
        'unit': 'dB SPL',
        'order_user_managed': True,
    },

    # MEMR
    'elicitor_bandlimited_noise_level': {
        'user_friendly_name': 'levels',
        'step_unit': 'dB',
        'unit': 'dB SPL',
    }
}


class CFTSSelector(FriendlyCartesianProduct):

    context_detail = CONTEXT_ITEM_DETAIL


enamldef TemperatureMixinManifest(ExperimentManifest): manifest:

    id = 'temperature_mixin'
    name = 'temperature'
    title = 'Temperature monitor'

    Extension:
        id = 'temperature_data'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'temperature_store'
            continuous_inputs = ['temperature']

    Extension:
        id = 'temperature_display'
        point = 'psi.experiment.status'

        StatusItem:
            label = 'Temperature'

            Label: temp:
                text = ''

    Extension:
        id = 'temperature_io'
        point = 'psi.controller.io'

        IIRFilter:
            source_name = 'temperature'
            f_lowpass = 0.5
            btype = 'lowpass'
            ftype = 'butter'
            N = 1

            Downsample:
                name = 'temperature_decimated'
                q = 500

                Callback:
                    function = lambda x: setattr(temp, 'text', f'{x[0, -1]:.1f}°C')


################################################################################
# Hardware mixins
################################################################################
enamldef SpeakerOutput(QueuedEpochChannelOutput):
    name = 'target'
    label = 'Target'


enamldef PTMicrophoneInput(ChannelInput):
    name = 'microphone'
    label = 'Probe tube mic.'


enamldef CalMicrophoneInput(ChannelInput):
    name = 'cal_microphone'
    label = 'Cal. mic.'


enamldef EEGFilter(IIRFilter):
    N = 2
    btype = 'bandpass'
    ftype = 'butter'
    passthrough = not C.digital_filter
    f_highpass = C.digital_highpass
    f_lowpass = C.digital_lowpass


enamldef BaseEEGInput(ChannelInput):
    label = 'EEG'
    show_gain_setting = False


enamldef EEGInput(BaseEEGInput): base:
    name = 'eeg'
    EEGFilter:
        name = 'eeg_filtered'


enamldef DecimatedEEGInput(BaseEEGInput): base:
    '''
    This makes it easier to use the EEGInput with various assays (e.g., ABR vs.
    EFR) that require different filtering parameters.
    '''
    alias target_fs: dec.target_fs
    DecimateTo: dec:
        name = 'eeg'
        EEGFilter:
            name = 'eeg_filtered'


enamldef BaseEEGInputManifest(ChannelInputManifest): manifest:

    Extension:
        id = manifest.id + '.eeg.context'
        point = 'psi.context.items'

        ContextRow:
            fmt = ['Amplifier filter', hp, 'to', lp, 'Hz at', gain, '✕ gain']
            group_name = 'hardware_settings'

            Parameter: hp:
                name = 'amplifier_highpass'
                label = 'Amplifier highpass filter cutoff'
                default = 10
                scope = 'experiment'

            Parameter: lp:
                name = 'amplifier_lowpass'
                label = 'Amplifier lowpass filter cutoff'
                default = 10e3
                scope = 'experiment'
                group_name = 'hardware_settings'

            Parameter: gain:
                name = 'amplifier_gain'
                label = 'Amplifier gain'
                default = 100e3
                scope = 'experiment'
                group_name = 'hardware_settings'

        ContextRow:
            name = 'digital_filter_settings'
            fmt << ['Digital filter?', filt_on] \
                if filt_on.expression == 'False' else \
                ['Digital filter?', filt_on, 'from', filt_hp, 'to', filt_lp, 'Hz']
            group_name = 'acquisition'

            BoolParameter: filt_on:
                name = 'digital_filter'
                label = 'Digital filter?'
                scope = 'experiment'
                default = True

            Parameter: filt_hp:
                name = 'digital_highpass'
                label = 'Digital highpass filter cutoff'
                default = 300
                scope = 'experiment'

            Parameter: filt_lp:
                name = 'digital_lowpass'
                label = 'Digital lowpass filter cutoff'
                default = 3000
                scope = 'experiment'


################################################################################
# ABR and DPOAE calibration mixins
################################################################################
enamldef InEarCalibrationMixinManifest(ExperimentManifest): manifest:

    attr experiment
    attr outputs
    attr get_values = lambda x: {si for i in x for si in i}

    id = f'{experiment}_inear_calibration_mixin'
    name = f'{experiment}_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = f'{experiment}_tone_calibration'
            label = 'Tone calibration'
            input_name = 'system_microphone'
            outputs << manifest.outputs
            gain << C.calibration_gain
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0
            get_values => (values):
                return manifest.get_values(values)


enamldef ABRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'abr'
    outputs = {'target': ['target_tone_frequency']}


enamldef DPOAEInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'dpoae'
    outputs = {
        'primary': ['primary_tone_frequency'],
        'secondary': ['secondary_tone_frequency'],
    }


enamldef SAMEFRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    # Both the carrier and the sidebands need to be calibrated
    experiment = 'sam_efr'
    outputs = {'target': ['fc', 'fm']}
    get_values = lambda values: set(v for fc, fm in values for v in (fc-fm, fc, fc+fm))


enamldef RAMEFRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'ram_efr'
    outputs = {'target': ['target_tone_frequency']}


enamldef MEMRInEarCalibrationMixinManifest(ExperimentManifest): manifest:

    attr experiment
    attr outputs
    id = f'{experiment}_inear_calibration_mixin'
    name = f'{experiment}_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ChirpCalibrate:
            name = f'memr_probe_calibration'
            label = 'Probe calibration'
            input_name = 'probe_microphone'
            outputs = {'probe': []}
            gain << C.calibration_gain

        ChirpCalibrate:
            name = f'memr_elicitor_calibration'
            label = 'Elicitor calibration'
            input_name = 'elicitor_microphone'
            outputs = {'elicitor': []}
            gain << C.calibration_gain


def initialize_starship(name, side, event):
    context = event.workbench.get_plugin('psi.context')

    starship = os.environ[f'CFTS_{side.upper()}_STARSHIP']
    item_starship = context.get_item(f'{name}')
    item_starship.set_value(starship)
    item_starship.editable = False

    gain = os.environ[f'CFTS_STARSHIP_{starship.upper()}_GAIN']
    item_gain = context.get_item(f'{name}_input_gain')
    item_gain.set_value(gain)
    item_gain.editable = False


enamldef Starship(ExperimentManifest): manifest:
    '''
    Defines a starship that consists of one probe tube microphone and two
    speakers. The IO manifest will be scanned for all channels that contain
    "starship" in the name. The channels must follow the naming convention:

        * starship_<name>_primary
        * starship_<name>_secondary
        * starship_<name>_microphone

    If any of these channels are missing, that starship will not be available
    for selection.
    '''

    id = 'starship'
    title = manifest.id.capitalize().replace('_', ' ')
    attr output_mode = 'dual'
    attr side = 'test'

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.id + '.initialize_starship_settings'
            handler = functools.partial(initialize_starship, manifest.name, manifest.side)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'plugins_started'
            command = manifest.id + '.initialize_starship_settings'

    Extension:
        id = manifest.id + '.io'
        point = 'psi.controller.io'

        ContinuousInput:
            name = f'{manifest.name}_microphone'
            source_name = 'hw_ai::' + getattr(C, f'{manifest.name}') + '_microphone'
            source::
                channel.gain = getattr(C, f'{manifest.name}_input_gain')

        Conditional:
            condition = manifest.output_mode == 'dual'

            MUXOutput:
                name = f'{manifest.name}_primary'
                target_name = 'hw_ao::' + getattr(C, f'{manifest.name}') + '_primary'

            MUXOutput:
                name = f'{manifest.name}_secondary'
                target_name = 'hw_ao::' + getattr(C, f'{manifest.name}') + '_secondary'

        Conditional:
            condition = manifest.output_mode == 'select'

            MUXOutput:
                name = f'{manifest.name}_output'
                target_name = 'hw_ao::' \
                    + getattr(C, f'{manifest.name}') + '_' \
                    + getattr(C, f'{manifest.name}_output')

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextRow:
            fmt = [f'{manifest.title}', starship, 'with', gain, 'dB gain'] \
                if manifest.output_mode == 'dual' \
                else [f'{manifest.title}', starship, 'with', gain, 'dB gain using', output, 'output']
            name = f'{manifest.name}_starship_settings'
            group_name = 'hardware_settings'

            EnumParameter: starship:
                name = f'{manifest.name}'
                label = f'{manifest.title}'
                choices = {k: f'"{v}"' for k, v in list_starship_connections().items()}
                scope = 'experiment'

            Parameter: gain:
                name = f'{manifest.name}_input_gain'
                label = f'{manifest.title} input gain (dB)'
                dtype = 'float64'
                default = 40
                scope = 'experiment'

            EnumParameter: output:
                name = f'{manifest.name}_output'
                choices = {'primary': '"primary"',
                            'secondary': '"secondary"'}
